/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/models/trees/grown-tree-1.gltf --transform -t -j -M 
Files: public/models/trees/grown-tree-1.gltf [9.38KB] > D:\work\websites\greenteam\grown-tree-1-transformed.glb [5.42KB] (42%)
*/

import * as THREE from "three"
import React, { useRef } from "react"
import { useGLTF } from "@react-three/drei"
import { GLTF } from "three-stdlib"

type GLTFResult = GLTF & {
    nodes: {
        Base: THREE.Mesh
        Icosphere: THREE.Mesh
    }
    materials: {
        BaseMaterial: THREE.MeshStandardMaterial
        LeafMaterial: THREE.MeshStandardMaterial
    }
    animations: any[]
}

type ContextType = Record<
    string,
    React.ForwardRefExoticComponent<JSX.IntrinsicElements["mesh"]>
>

export default function GrownTree(props: JSX.IntrinsicElements["group"]) {
    const { nodes, materials } = useGLTF(
        "/models/transformed/grown-tree-1-transformed.glb",
    ) as GLTFResult
    return (
        <group {...props} dispose={null}>
            <mesh
                geometry={nodes.Base.geometry}
                material={materials.BaseMaterial}
                position={[0.53, 5.204, -0.01]}
                rotation={[0, 0, -0.561]}
            />
            <instancedMesh
                args={[nodes.Icosphere.geometry, materials.LeafMaterial, 6]}
                //@ts-ignore
                instanceMatrix={nodes.Icosphere.instanceMatrix}
            />
        </group>
    )
}

useGLTF.preload("/models/transformed/grown-tree-1-transformed.glb")
