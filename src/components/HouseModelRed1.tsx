"use client"
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/models/houses/red-1.gltf --transform -t -j 
Files: public/models/houses/red-1.gltf [14.65KB] > D:\work\websites\greenteam\red-1-transformed.glb [12.1KB] (17%)
*/

import * as THREE from "three"
import React, { useEffect, useRef, useState } from "react"
import { useGLTF } from "@react-three/drei"
import { GLTF } from "three-stdlib"

type GLTFResult = GLTF & {
    nodes: {
        Chimney: THREE.Mesh
        ChimneyTop: THREE.Mesh
        Door: THREE.Mesh
        DoorKnob: THREE.Mesh
        Roof: THREE.Mesh
        Stairs: THREE.Mesh
        Step: THREE.Mesh
        Walls: THREE.Mesh
        WindowFrames: THREE.Mesh
        WindowGlasses: THREE.Mesh
    }
    materials: {
        walls: THREE.MeshStandardMaterial
        Door: THREE.MeshStandardMaterial
        ["Door knob"]: THREE.MeshStandardMaterial
        ["Material.001"]: THREE.MeshStandardMaterial
        Material: THREE.MeshStandardMaterial
        gray: THREE.MeshStandardMaterial
        Glass: THREE.MeshStandardMaterial
    }
    animations: any[]
}

type ContextType = Record<
    string,
    React.ForwardRefExoticComponent<JSX.IntrinsicElements["mesh"]>
>

export default function HouseModelRed1(props: JSX.IntrinsicElements["group"]) {
    const { nodes, materials } = useGLTF(
        "/models/transformed/red-1-transformed.glb",
    ) as GLTFResult

    const houseRef = useRef<THREE.Mesh>(null!)
    const roofRef = useRef<THREE.Mesh>(null!)
    const chimneyTopRef = useRef<THREE.Mesh>(null!)
    const chimneyRef = useRef<THREE.Mesh>(null!)
    const stairsRef = useRef<THREE.Mesh>(null!)
    const stepRef = useRef<THREE.Mesh>(null!)
    const windowFramesRef = useRef<THREE.Mesh>(null!)
    const doorRef = useRef<THREE.Mesh>(null!)
    const doorKnobRef = useRef<THREE.Mesh>(null!)
    const [hovered, setHovered] = useState(false)
    useEffect(() => {
        houseRef.current.material = hovered ? materials.Glass : materials.walls
        roofRef.current.material = hovered
            ? materials.Glass
            : materials["Material.001"]
        chimneyTopRef.current.material = hovered
            ? materials.Glass
            : materials.walls
        chimneyRef.current.material = hovered
            ? materials.Glass
            : materials.walls
        doorRef.current.material = hovered ? materials.Glass : materials.Door
        doorKnobRef.current.material = hovered
            ? materials.Glass
            : materials["Door knob"]
        stairsRef.current.material = hovered
            ? materials.Glass
            : materials.Material
        stepRef.current.material = hovered
            ? materials.Glass
            : materials["Material.001"]
        windowFramesRef.current.material = hovered
            ? materials.Glass
            : materials.gray
    }, [hovered])
    return (
        <group
            {...props}
            dispose={null}
            onPointerEnter={() => setHovered(true)}
            onPointerLeave={() => {
                setHovered(false)
            }}
        >
            <mesh
                geometry={nodes.Chimney.geometry}
                material={materials.walls}
                position={[-5.775, 5.012, -1.268]}
                scale={[0.425, 1.904, 0.339]}
                ref={chimneyRef}
            />
            <mesh
                geometry={nodes.ChimneyTop.geometry}
                material={materials.walls}
                position={[-5.775, 5.012, -1.268]}
                scale={[0.382, 1.71, 0.305]}
                ref={chimneyTopRef}
            />
            <mesh
                geometry={nodes.Door.geometry}
                material={materials.Door}
                position={[-1.792, 1.818, -4.002]}
                scale={[1.485, 1.185, 1.185]}
                ref={doorRef}
            />
            <mesh
                geometry={nodes.DoorKnob.geometry}
                material={materials["Door knob"]}
                position={[-1.792, 1.818, -4.002]}
                scale={[1.485, 1.185, 1.185]}
                ref={doorKnobRef}
            />
            <mesh
                geometry={nodes.Roof.geometry}
                material={materials["Material.001"]}
                position={[-4.66, 2.104, -4.002]}
                scale={[2.97, 2.074, 3.966]}
                ref={roofRef}
            />
            <mesh
                geometry={nodes.Stairs.geometry}
                material={materials.Material}
                position={[-4.66, 2.104, -4.002]}
                scale={[1.485, 1.185, 1.185]}
                ref={stairsRef}
            />
            <mesh
                geometry={nodes.Step.geometry}
                material={materials["Material.001"]}
                position={[-4.66, 2.104, -4.002]}
                scale={[1.485, 1.185, 1.185]}
                ref={stepRef}
            />
            <mesh
                geometry={nodes.Walls.geometry}
                material={materials.walls}
                position={[-4.66, 2.104, -4.002]}
                scale={[1.485, 1.185, 1.185]}
                ref={houseRef}
            />
            <mesh
                geometry={nodes.WindowFrames.geometry}
                material={materials.gray}
                position={[-4.66, 0.03, -4.002]}
                scale={[1.485, 1.185, 1.185]}
                ref={windowFramesRef}
            />
            <mesh
                geometry={nodes.WindowGlasses.geometry}
                material={materials.Glass}
                position={[-4.66, 0.03, -4.002]}
                scale={[1.485, 1.185, 1.185]}
            />
        </group>
    )
}

useGLTF.preload("/models/transformed/red-1-transformed.glb")
