//@ts-nocheck
"use client"
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/models/planes/dirt-tile/dirt-road-1.gltf --transform 
Files: public/models/planes/dirt-tile/dirt-road-1.gltf [8.48KB] > D:\work\websites\greenteam\dirt-road-1-transformed.glb [4.93KB] (42%)
*/

import React, { useEffect, useRef, useState } from "react"
import { useGLTF } from "@react-three/drei"

export default function DirtRoad({ position, rotation, kind }) {
    const { nodes, materials } = useGLTF(
        "/models/transformed/dirt-road-1-transformed.glb",
    )

    const [hovered, setHovered] = useState(false)
    const dirtRef = useRef<THREE.Mesh>(null!)
    useEffect(() => {
        dirtRef.current.material = hovered ? materials.Rock : materials.Dirt
    }, [hovered])
    const grassElevation = 0.01
    if (kind === 0) {
        return (
            <group position={position} rotation={rotation} dispose={null}>
                <mesh
                    geometry={nodes.Block.geometry}
                    material={materials.Dirt}
                />
                <mesh
                    geometry={nodes.Rock001.geometry}
                    material={materials.Rock}
                    position={[0.719, 0.996, -0.152]}
                    scale={[0.729, 0.28, 0.729]}
                />
                <mesh
                    geometry={nodes.Road.geometry}
                    material={materials.DirtRoad}
                    position={[0, -0.004 + grassElevation, 0.002]}
                    onPointerEnter={() => setHovered(true)}
                    onPointerLeave={() => setHovered(false)}
                    ref={dirtRef}
                />
            </group>
        )
    } else if (kind === 1) {
        return (
            <group position={position} rotation={rotation} dispose={null}>
                <mesh
                    geometry={nodes.Block.geometry}
                    material={materials.Dirt}
                />
                <mesh
                    geometry={nodes.Road.geometry}
                    material={materials.DirtRoad}
                    position={[0, -0.004 + grassElevation, 0.002]}
                    onPointerEnter={() => setHovered(true)}
                    onPointerLeave={() => setHovered(false)}
                    ref={dirtRef}
                />
            </group>
        )
    } else {
        return (
            <group position={position} rotation={rotation} dispose={null}>
                <mesh
                    geometry={nodes.Road.geometry}
                    material={materials.DirtRoad}
                    position={[0, -0.004 + grassElevation, 0.002]}
                    onPointerEnter={() => setHovered(true)}
                    onPointerLeave={() => setHovered(false)}
                    ref={dirtRef}
                />
            </group>
        )
    }
}

useGLTF.preload("/models/transformed/dirt-road-1-transformed.glb")
useGLTF.preload("/models/transformed/dirt-road-2-transformed.glb")
